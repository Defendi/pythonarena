#!/usr/bin/env python
#
# Read TM raw files
#
#--------------------------
#

from __future__ import generators

__appname__ = 'pytm'
__version__ = "0.1"
__author__ = "Nicolas Hennion"
__licence__ = "LGPL"

# Libs
#=====

import sys
import struct

# Classes
#========


# Functions
#==========

def bin(x, digits=0): 
   oct2bin = ['000','001','010','011','100','101','110','111'] 
   binstring = [oct2bin[int(n)] for n in oct(x)] 
   return ''.join(binstring).lstrip('0').zfill(digits) 

# Main
#=====

if __name__ == "__main__":

   # Read a TM file
   f = open('../../../../data/PW7_TM/PW7_2012_05_23_01_NRM.TLM', 'rb') 

   # TODO une fois compris
   # Utiliser http://pythoncodeblog.blogspot.fr/2011/06/python-read-binary-file.html

   # Ignore the first 8 bytes (why ?)
   f.seek(8)

   # Read packet header
   print "Packet header"
   # - Read packet identification 
   packet_identification = f.read(2)
   # -- version_number should be '100'
   pi_version_number = bin(int(packet_identification.encode('hex'), 16))[:3] 
   # -- 0 for TM / 1 for TC
   pi_type = bin(int(packet_identification.encode('hex'), 16))[3]
   # -- Presence (1) or absence (0) of the data field header
   pi_data_field_header_flag = bin(int(packet_identification.encode('hex'), 16))[4]
   # -- Application Process ID
   # -- All 0: Standard source packet containing the spacecraft time
   # -- All 1: Idle source packet
   pi_application_process_id = bin(int(packet_identification.encode('hex'), 16))[5:16]
   # For debug only...
   print "%s %s" % (" packet_identification  ", packet_identification.encode('hex'))
   print "%s %s" % ("  version_number        ", pi_version_number)
   print "%s %s" % ("  type                  ", pi_type)
   print "%s %s" % ("  data_field_header_flag", pi_data_field_header_flag)
   print "%s %s" % ("  application_process_id", pi_application_process_id)
   # - Read packet sequence control
   packet_sequence_control = f.read(2)
   # -- '01' first segment
   # -- '00' continuation segment
   # -- '10' last segment
   # -- '11' unsegmented
   ps_segmentation_flag = bin(int(packet_sequence_control.encode('hex'), 16))[:2]
   ps_source_sequence_count = bin(int(packet_sequence_control.encode('hex'), 16))[2:16]
   # For debug only...
   print "%s %s" % (" packet_sequence_control", packet_sequence_control.encode('hex'))
   print "%s %s" % ("  segmentation_flag     ", ps_segmentation_flag)
   print "%s %s (%d)" % ("  source_sequence_count ", ps_source_sequence_count, int(ps_source_sequence_count) % 16384)
   # - Read the packet lenght
   packet_lenght = f.read(2)
   print "%s %s (%d)" % (" packet_lenght          ", packet_lenght.encode('hex'), int(packet_lenght.encode('hex'), 16))
   # print bin(int(packet_lenght.encode('hex'), 16))
   # Read packet data field
   print "Packet data field"
   packet_data = f.read(683-6)
   
   # Next packet ?
   packet_identification = f.read(2)
   print "%s %s" % ("Next packet ID", packet_identification.encode('hex'))

   # Exit
   f.close()
   sys.exit(0)

# End
#====
